{
  "name": "ulogi",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "docker:deploy:new-web": "npm run docker:build:web && docker run -d -p 4000:4000 new-web:latest",
    "start": "nx serve",
    "build": "nx build",
    "test": "nx test",
    "az:auth": "az aks get-credentials --resource-group production --name k8-production",
    "gql": "npx graphql-codegen --c ./libs/frontend/shared/graphql/src/angular-codegen.yml",
    "typeorm": "npx tsc -p libs/database/entities/tsconfig.lib.json && npx tsc-alias -p libs/database/entities/tsconfig.lib.json && nx build database && typeorm-ts-node-commonjs -d ./apps/database/src/data-source.ts",
    "migration:create": "ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli migration:create ./apps/database/src/migrations/$npm_config_name",
    "migration:create:win": "ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli migration:create ./apps/database/src/migrations/%npm_config_name%",
    "migration:generate": "npm run typeorm -- migration:generate ./apps/database/src/migrations/$npm_config_name",
    "migration:generate:win": "npm run typeorm -- migration:generate ./apps/database/src/migrations/%npm_config_name%",
    "migration:run": "npm run typeorm -- migration:run",
    "migration:revert": "npm run typeorm -- migration:revert",
    "typeorm:production": "npx tsc -p libs/database/entities/tsconfig.lib.json && npx tsc-alias -p libs/database/entities/tsconfig.lib.json && nx build database && typeorm-ts-node-commonjs -d ./apps/database/src/production.data-source.ts",
    "migration:run:production": "nx build database && npm run typeorm:production -- migration:run",
    "docker:build:timescale": "docker build -f ./system/docker/production/crunchy-timescale-community/Dockerfile . -t crunchy-timescale:latest",
    "docker:tag:timescale": "docker tag crunchy-timescale ulogi.azurecr.io/crunchy-timescale",
    "docker:push:timescale": "docker push ulogi.azurecr.io/crunchy-timescale",
    "timescale:deploy": "npm run az:auth && az acr login -n ulogi && npm run docker:build:timescale && npm run docker:tag:timescale && npm run docker:push:timescale",
    "docker:build:admin": " docker build -f ./system/docker/production/admin/Dockerfile . -t admin:latest",
    "docker:build:api": " docker build -f ./system/docker/production/api/Dockerfile . -t api:latest",
    "docker:build:machine-learning": " docker build -f ./system/docker/production/machine-learning/Dockerfile . -t machine-learning:latest",
    "docker:build:app": " docker build -f ./system/docker/production/app/Dockerfile . -t app:latest",
    "docker:build:web": "nx build web && docker build -f ./system/docker/production/web/Dockerfile . -t new-web:latest",
    "docker:build:background": " docker build -f ./system/docker/production/background/Dockerfile . -t background:latest",
    "docker:build:device": " docker build -f ./system/docker/production/ortem/Dockerfile . -t device:latest",
    "docker:build:teltonika": " docker build -f ./system/docker/production/teltonika/Dockerfile . -t teltonika:latest",
    "docker:build:transportation-document": " docker build -f ./system/docker/production/transportation-document/Dockerfile . -t transportation-document:latest",
    "docker:build:microservice-file": " docker build -f ./system/docker/production/microservice-file/Dockerfile . -t microservice-file:latest",
    "docker:tag:app": "docker tag app ulogi.azurecr.io/app",
    "docker:tag:admin": "docker tag admin ulogi.azurecr.io/admin",
    "docker:deploy:tag": "docker tag app ulogi.azurecr.io/web",
    "docker:tag:api": "docker tag api ulogi.azurecr.io/api",
    "docker:tag:web": "docker tag new-web ulogi.azurecr.io/new-web",
    "docker:tag:machine-learning": "docker tag machine-learning ulogi.azurecr.io/machine-learning",
    "docker:tag:background": "docker tag background ulogi.azurecr.io/background",
    "docker:tag:device": "docker tag device ulogi.azurecr.io/device",
    "docker:tag:teltonika": "docker tag teltonika ulogi.azurecr.io/teltonika",
    "docker:tag:transportation-document": "docker tag transportation-document ulogi.azurecr.io/transportation-document",
    "docker:tag:microservice-file": "docker tag microservice-file ulogi.azurecr.io/microservice-file",
    "docker:push:app": "docker push ulogi.azurecr.io/app",
    "docker:push:admin": "docker push ulogi.azurecr.io/admin",
    "docker:push:api": "docker push ulogi.azurecr.io/api",
    "docker:push:web": "docker push ulogi.azurecr.io/new-web",
    "docker:push:machine-learning": "docker push ulogi.azurecr.io/machine-learning",
    "docker:push:background": "docker push ulogi.azurecr.io/background",
    "docker:push:device": "docker push ulogi.azurecr.io/device",
    "docker:push:teltonika": "docker push ulogi.azurecr.io/teltonika",
    "docker:push:transportation-document": "docker push ulogi.azurecr.io/transportation-document",
    "docker:push:microservice-file": "docker push ulogi.azurecr.io/microservice-file",
    "kube:rollout:app": "kubectl rollout restart -n default deployment app",
    "kube:rollout:admin": "kubectl rollout restart -n default deployment admin ",
    "kube:rollout:api": "kubectl rollout restart -n default deployment api ",
    "kube:rollout:web": "kubectl rollout restart -n default deployment web ",
    "kube:rollout:machine-learning": "kubectl rollout restart -n default deployment machine-learning ",
    "kube:rollout:background": "kubectl rollout restart -n default deployment background ",
    "kube:rollout:device-ortem": "kubectl rollout restart -n default deployment device-ortem ",
    "kube:rollout:device-teltonika": "kubectl rollout restart -n default deployment device-teltonika ",
    "kube:rollout:transportation-document": "kubectl rollout restart -n default deployment transportation-document ",
    "kube:rollout:microservice-file": "kubectl rollout restart -n default deployment microservice-file ",
    "az:deploy:app": "az acr login -n ulogi && nx build app && npm run docker:build:app && npm run docker:tag:app && npm run docker:push:app && npm run kube:rollout:app",
    "az:deploy:device": "az acr login -n ulogi && nx build ortem && npm run docker:build:device && npm run docker:tag:device && npm run docker:push:device && npm run kube:rollout:device-ortem",
    "az:deploy:teltonika": "az acr login -n ulogi && nx build teltonika && npm run docker:build:teltonika && npm run docker:tag:teltonika && npm run docker:push:teltonika && npm run kube:rollout:device-teltonika",
    "az:deploy:transportation-document": "az acr login -n ulogi && nx build transportation-document && npm run docker:build:transportation-document && npm run docker:tag:transportation-document && npm run docker:push:transportation-document && npm run kube:rollout:transportation-document",
    "az:deploy:background": "az acr login -n ulogi && nx build background && npm run docker:build:background && npm run docker:tag:background && npm run docker:push:background &&  npm run migration:run:production && npm run kube:rollout:background",
    "az:deploy:admin": "az acr login -n ulogi && nx build admin && npm run docker:build:admin && npm run docker:tag:admin && npm run docker:push:admin && npm run kube:rollout:admin",
    "az:deploy:api": "az acr login -n ulogi && nx build api && npm run docker:build:api && npm run docker:tag:api && npm run docker:push:api && npm run migration:run:production && npm run kube:rollout:api",
    "az:deploy:web": "az acr login -n ulogi && npm run docker:build:web && npm run docker:tag:web && npm run docker:push:web && npm run kube:rollout:web",
    "az:deploy:frontend": "npm run az:deploy:web && npm run az:deploy:app && npm run az:deploy:admin",
    "az:deploy:machine-learning": "az acr login -n ulogi && nx build machine-learning && npm run docker:build:machine-learning && npm run docker:tag:machine-learning && npm run docker:push:machine-learning && npm run kube:rollout:machine-learning",
    "az:deploy:microservice-file": "az acr login -n ulogi && nx build microservice-file && npm run docker:build:microservice-file && npm run docker:tag:microservice-file && npm run docker:push:microservice-file && npm run kube:rollout:microservice-file",
    "az:deploy:build": "nx build app && nx build admin && nx build api && nx build background && nx build transportation-document && nx build ortem && nx build teltonika && nx build web && nx build machine-learning && nx build microservice-file",
    "az:deploy:docker:build": "npm run docker:build:app && npm run docker:build:admin && npm run docker:build:api && npm run docker:build:background && npm run docker:build:device && npm run docker:build:transportation-document && npm run docker:build:teltonika && npm run docker:build:machine-learning && npm run docker:build:microservice-file && npm run docker:build:web",
    "az:deploy:docker:tag": "npm run docker:tag:app && npm run docker:tag:admin && npm run docker:tag:api && npm run docker:tag:background && npm run docker:tag:device && npm run docker:tag:transportation-document && npm run docker:tag:teltonika && npm run docker:tag:machine-learning && npm run docker:tag:microservice-file && npm run docker:tag:web",
    "az:deploy:docker:push": "npm run docker:push:app && npm run docker:push:admin && npm run docker:push:api && npm run docker:push:background && npm run docker:push:device && npm run docker:push:transportation-document && npm run docker:push:teltonika && npm run docker:push:machine-learning && npm run docker:push:microservice-file && npm run docker:push:web",
    "az:deploy:kube:rollout": "npm run kube:rollout:app && npm run kube:rollout:admin && npm run kube:rollout:api && npm run kube:rollout:background && npm run kube:rollout:device-ortem && npm run kube:rollout:transportation-document && npm run kube:rollout:device-teltonika && npm run kube:rollout:machine-learning && npm run kube:rollout:microservice-file && npm run kube:rollout:web",
    "microservices": "nx run-many --parallel --target=serve --projects=common,iot --maxParallel=20",
    "az:deploy": "kubectl config use-context ulogi-main-kubernetes && az acr login -n ulogi &&  npm run az:deploy:build && npm run az:deploy:docker:build && npm run az:deploy:docker:tag && npm run az:deploy:docker:push && npm run migration:run:production && npm run az:deploy:kube:rollout"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "17.3.5",
    "@angular/cdk": "17.3.5",
    "@angular/common": "17.3.5",
    "@angular/compiler": "17.3.5",
    "@angular/core": "17.3.5",
    "@angular/forms": "17.3.5",
    "@angular/google-maps": "^17.3.5",
    "@angular/platform-browser": "17.3.5",
    "@angular/platform-browser-dynamic": "17.3.5",
    "@angular/platform-server": "17.3.5",
    "@angular/router": "17.3.5",
    "@angular/service-worker": "17.3.5",
    "@angular/ssr": "^17.3.5",
    "@apollo/client": "^3.10.8",
    "@apollo/server": "^4.10.4",
    "@azure/storage-blob": "^12.17.0",
    "@deck.gl/google-maps": "^9.0.9",
    "@googlemaps/google-maps-services-js": "^3.4.0",
    "@nestjs/apollo": "^12.1.0",
    "@nestjs/axios": "^3.0.2",
    "@nestjs/bull": "^10.1.1",
    "@nestjs/common": "^10.3.8",
    "@nestjs/core": "^10.3.8",
    "@nestjs/cqrs": "^10.2.7",
    "@nestjs/graphql": "^12.1.1",
    "@nestjs/jwt": "^10.2.0",
    "@nestjs/microservices": "^10.3.8",
    "@nestjs/passport": "^10.0.3",
    "@nestjs/platform-express": "^10.3.8",
    "@nestjs/typeorm": "^10.0.2",
    "@ngx-translate/core": "^15.0.0",
    "@ngx-translate/http-loader": "^8.0.0",
    "@turf/turf": "^6.5.0",
    "angular-feather": "^6.5.1",
    "apollo-angular": "^7.0.2",
    "bcrypt": "^5.1.1",
    "bull": "^4.12.2",
    "chart.js": "^4.4.2",
    "chartjs-adapter-date-fns": "^3.0.0",
    "chartjs-plugin-zoom": "^2.0.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "dataloader": "^2.2.2",
    "date-fns": "^3.6.0",
    "date-fns-tz": "^3.1.3",
    "deck.gl": "^9.0.9",
    "express": "^4.19.2",
    "geojson": "^0.5.0",
    "graphql": "^16.8.1",
    "graphql-redis-subscriptions": "^2.6.0",
    "ioredis": "^5.4.1",
    "nats": "^2.22.0",
    "ngx-mask": "^17.0.7",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "pg": "^8.11.5",
    "postmark": "^4.0.2",
    "primeflex": "^3.3.1",
    "primeicons": "^7.0.0",
    "primeng": "^17.14.0",
    "reflect-metadata": "^0.2.2",
    "rxjs": "7.8.1",
    "tslib": "^2.6.2",
    "typeorm": "^0.3.20",
    "uuid": "^9.0.1",
    "winston": "^3.13.0",
    "winston-transport": "^4.7.0",
    "xlsx": "^0.18.5",
    "xml2js": "^0.6.2",
    "zone.js": "0.14.4"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "17.3.5",
    "@angular-devkit/core": "17.3.5",
    "@angular-devkit/schematics": "17.3.5",
    "@angular-eslint/eslint-plugin": "17.3.0",
    "@angular-eslint/eslint-plugin-template": "17.3.0",
    "@angular-eslint/template-parser": "17.3.0",
    "@angular/cli": "~17.3.0",
    "@angular/compiler-cli": "17.3.5",
    "@angular/language-service": "17.3.5",
    "@angular/pwa": "17.3.5",
    "@graphql-codegen/cli": "^5.0.2",
    "@graphql-codegen/typescript": "^4.0.6",
    "@graphql-codegen/typescript-apollo-angular": "^4.0.0",
    "@graphql-codegen/typescript-operations": "^4.2.0",
    "@nestjs/schematics": "10.1.1",
    "@nestjs/testing": "10.3.8",
    "@nx/angular": "19.0.4",
    "@nx/esbuild": "19.0.4",
    "@nx/eslint": "19.0.4",
    "@nx/eslint-plugin": "19.0.4",
    "@nx/jest": "19.0.4",
    "@nx/js": "19.0.4",
    "@nx/nest": "19.0.4",
    "@nx/node": "19.0.4",
    "@nx/web": "19.0.4",
    "@nx/webpack": "19.0.4",
    "@nx/workspace": "19.0.4",
    "@schematics/angular": "17.3.5",
    "@swc-node/register": "1.9.0",
    "@swc/core": "~1.4.16",
    "@swc/helpers": "~0.5.2",
    "@types/bcrypt": "^5.0.2",
    "@types/express": "4.17.14",
    "@types/google.maps": "^3.55.7",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.12.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/uuid": "^9.0.8",
    "@types/xml2js": "^0.4.14",
    "@typescript-eslint/eslint-plugin": "7.3.0",
    "@typescript-eslint/parser": "7.3.0",
    "browser-sync": "^3.0.0",
    "esbuild": "^0.19.2",
    "eslint": "8.57.0",
    "eslint-config-prettier": "9.1.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-environment-node": "^29.4.1",
    "nx": "19.0.4",
    "prettier": "^3.2.5",
    "ts-jest": "29.1.2",
    "ts-node": "10.9.2",
    "typescript": "5.4.5"
  },
  "overrides": {
    "@googlemaps/url-signature": "1.0.32"
  }
}
